<?xml version="1.0" encoding="UTF-8"?><apiPackage id="com.tuarua.vibration.ios"><apiName>com.tuarua.vibration.ios</apiName><apiDetail/><apiClassifier id="com.tuarua.vibration.ios:SystemSoundID"><apiName>SystemSoundID</apiName><shortdesc/><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiValue id="com.tuarua.vibration.ios:SystemSoundID:CANCELLED"><apiName>CANCELLED</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>1521</apiData><apiType value="int"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.tuarua.vibration.ios:SystemSoundID:DEFAULT"><apiName>DEFAULT</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>4095</apiData><apiType value="int"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.tuarua.vibration.ios:SystemSoundID:FAILED"><apiName>FAILED</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>1107</apiData><apiType value="int"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.tuarua.vibration.ios:SystemSoundID:PEEK"><apiName>PEEK</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>1519</apiData><apiType value="int"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.tuarua.vibration.ios:SystemSoundID:POP"><apiName>POP</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>1520</apiData><apiType value="int"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.tuarua.vibration.ios:SystemSoundID:TRY_AGAIN"><apiName>TRY_AGAIN</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>1102</apiData><apiType value="int"/></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="com.tuarua.vibration.ios:SelectionFeedbackGenerator"><apiName>SelectionFeedbackGenerator</apiName><shortdesc> SelectionFeedbackGenerator is used to give user feedback when a selection changes </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc> SelectionFeedbackGenerator is used to give user feedback when a selection changes </apiDesc></apiClassifierDetail><apiConstructor id="com.tuarua.vibration.ios:SelectionFeedbackGenerator:SelectionFeedbackGenerator"><apiName>SelectionFeedbackGenerator</apiName><shortdesc/><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef></apiConstructorDetail></apiConstructor><apiOperation id="com.tuarua.vibration.ios:SelectionFeedbackGenerator:prepare"><apiName>prepare</apiName><shortdesc> Informs self that it will likely receive events soon, so that it can ensure minimal latency for
     any feedback generated safe to call more than once before the generator receives an event,
     if events are still imminently possible </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> Informs self that it will likely receive events soon, so that it can ensure minimal latency for
     any feedback generated safe to call more than once before the generator receives an event,
     if events are still imminently possible </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua.vibration.ios:SelectionFeedbackGenerator:release"><apiName>release</apiName><shortdesc> Release the SelectionFeedbackGenerator.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> Release the SelectionFeedbackGenerator. </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua.vibration.ios:SelectionFeedbackGenerator:selectionChanged"><apiName>selectionChanged</apiName><shortdesc> Call when the selection changes (not on initial selection) </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> Call when the selection changes (not on initial selection) </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="com.tuarua.vibration.ios:StoppedReason"><apiName>StoppedReason</apiName><shortdesc> An enumeration of possible reasons the haptic engine stopped running.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc> An enumeration of possible reasons the haptic engine stopped running. </apiDesc></apiClassifierDetail><apiValue id="com.tuarua.vibration.ios:StoppedReason:applicationSuspended"><apiName>applicationSuspended</apiName><shortdesc> The app with haptics was suspended.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>2</apiData><apiType value="int"/></apiValueDef><apiDesc> The app with haptics was suspended. </apiDesc></apiValueDetail></apiValue><apiValue id="com.tuarua.vibration.ios:StoppedReason:audioSessionInterrupt"><apiName>audioSessionInterrupt</apiName><shortdesc> The audio session was interrupted.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>1</apiData><apiType value="int"/></apiValueDef><apiDesc> The audio session was interrupted. </apiDesc></apiValueDetail></apiValue><apiValue id="com.tuarua.vibration.ios:StoppedReason:idleTimeout"><apiName>idleTimeout</apiName><shortdesc> The haptic engine timed out during a task.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>3</apiData><apiType value="int"/></apiValueDef><apiDesc> The haptic engine timed out during a task. </apiDesc></apiValueDetail></apiValue><apiValue id="com.tuarua.vibration.ios:StoppedReason:notifyWhenFinished"><apiName>notifyWhenFinished</apiName><shortdesc> You've asked to be notified notifyWhenPlayersFinished shuts down the engine.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>4</apiData><apiType value="int"/></apiValueDef><apiDesc> You've asked to be notified notifyWhenPlayersFinished shuts down the engine. </apiDesc></apiValueDetail></apiValue><apiValue id="com.tuarua.vibration.ios:StoppedReason:systemError"><apiName>systemError</apiName><shortdesc> A system error stopped the engine.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>-1</apiData><apiType value="int"/></apiValueDef><apiDesc> A system error stopped the engine. </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="com.tuarua.vibration.ios:ImpactFeedbackGenerator"><apiName>ImpactFeedbackGenerator</apiName><shortdesc> ImpactFeedbackGenerator is used to give user feedback when an impact between UI elements occurs </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc> ImpactFeedbackGenerator is used to give user feedback when an impact between UI elements occurs </apiDesc></apiClassifierDetail><apiConstructor id="com.tuarua.vibration.ios:ImpactFeedbackGenerator:ImpactFeedbackGenerator"><apiName>ImpactFeedbackGenerator</apiName><shortdesc/><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="uint"/></apiParam></apiConstructorDef></apiConstructorDetail></apiConstructor><apiOperation id="com.tuarua.vibration.ios:ImpactFeedbackGenerator:impactOccurred"><apiName>impactOccurred</apiName><shortdesc> Call when your UI element impacts something else </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> Call when your UI element impacts something else </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua.vibration.ios:ImpactFeedbackGenerator:prepare"><apiName>prepare</apiName><shortdesc> Informs self that it will likely receive events soon, so that it can ensure minimal latency for
     any feedback generated safe to call more than once before the generator receives an event,
     if events are still imminently possible </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> Informs self that it will likely receive events soon, so that it can ensure minimal latency for
     any feedback generated safe to call more than once before the generator receives an event,
     if events are still imminently possible </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua.vibration.ios:ImpactFeedbackGenerator:release"><apiName>release</apiName><shortdesc> Release the ImpactFeedbackGenerator.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> Release the ImpactFeedbackGenerator. </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="com.tuarua.vibration.ios:ImpactFeedbackStyle"><apiName>ImpactFeedbackStyle</apiName><shortdesc/><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiValue id="com.tuarua.vibration.ios:ImpactFeedbackStyle:HEAVY"><apiName>HEAVY</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>2</apiData><apiType value="uint"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.tuarua.vibration.ios:ImpactFeedbackStyle:LIGHT"><apiName>LIGHT</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0</apiData><apiType value="uint"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.tuarua.vibration.ios:ImpactFeedbackStyle:MEDIUM"><apiName>MEDIUM</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>1</apiData><apiType value="uint"/></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="com.tuarua.vibration.ios:HapticEngine"><apiName>HapticEngine</apiName><shortdesc/><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiConstructor id="com.tuarua.vibration.ios:HapticEngine:HapticEngine"><apiName>HapticEngine</apiName><shortdesc>
     An object that manages your app's requests to play haptic patterns.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc>ANEError if the engine cannot be created
     </apiDesc><apiItemName>An</apiItemName><apiOperationClassifier>An</apiOperationClassifier></apiException></apiConstructorDef><apiDesc>
     An object that manages your app's requests to play haptic patterns.
     
     <p>If you want your app to play custom haptics, you need to create a haptic engine.
     The haptic engine establishes the connection between your app and the underlying device hardware.
     Even though you can define a haptic pattern without an engine, you need the engine to play that pattern.
     Even though your app makes a request through the haptic engine, the operating system could still
     override the request with system services, like haptics from system notifications.</p>
     
     </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="com.tuarua.vibration.ios:HapticEngine:playPattern"><apiName>playPattern</apiName><shortdesc>
     Plays a plist pattern from the specified URL.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>ANEError if the pattern cannot be played.
     </apiDesc><apiItemName>An</apiItemName><apiOperationClassifier>An</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>fileName</apiItemName><apiType value="String"/><apiDesc>The file name of the AHAP file containing the haptic event dictionary.
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     Plays a plist pattern from the specified URL.
     
     <p>This method blocks processing on the current thread until the pattern has finished playing.</p>
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua.vibration.ios:HapticEngine:start"><apiName>start</apiName><shortdesc>
     Synchronously starts the haptic engine.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>ANEError if the pattern cannot be played.
     </apiDesc><apiItemName>An</apiItemName><apiOperationClassifier>An</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
     Synchronously starts the haptic engine.
     
     <p>This method blocks all subsequent event processing on the current thread until the engine has started.
     It throws an error if the engine can't start.</p>
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua.vibration.ios:HapticEngine:stop"><apiName>stop</apiName><shortdesc>
     Asynchronously stop the engine.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
     Asynchronously stop the engine. The handler will be called when the operation completes.
     
     <p>The handler is guaranteed to be called on either success or failure.</p>
     </apiDesc></apiOperationDetail></apiOperation><apiValue id="com.tuarua.vibration.ios:HapticEngine:supportsHaptics:get"><apiName>supportsHaptics</apiName><shortdesc>
     A Boolean value that indicates whether the device supports haptic event playback.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
     A Boolean value that indicates whether the device supports haptic event playback.
     </apiDesc></apiValueDetail></apiValue><apiValue id="com.tuarua.vibration.ios:HapticEngine:resetHandler:set"><apiName>resetHandler</apiName><shortdesc>
     A function that the haptic engine calls when it stops due to external causes.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Function"/></apiValueDef><apiDesc>
     A function that the haptic engine calls when it stops due to external causes.
     
     <p>If the handler has to reset itself after a server failure, the system calls this block asynchronously.
     In this block, release all haptic pattern players and recreate them. The system preserves HapticPattern
     objects and HapticEngine properties across restarts. Consider trying to restart the engine inside the
     reset block.</p>
     </apiDesc></apiValueDetail></apiValue><apiValue id="com.tuarua.vibration.ios:HapticEngine:stoppedHandler:set"><apiName>stoppedHandler</apiName><shortdesc>
     A function that the haptic engine calls after recovering from a haptic server error.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Function"/></apiValueDef><apiDesc>
     A function that the haptic engine calls after recovering from a haptic server error.
     
     <p>External causes that can trigger this block include audio session interruption, application suspension,
     or system error. Calling stop doesn't trigger this block.
     Callbacks to this block arrive on a non-main thread, so handle them in a thread-safe manner.</p>
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="com.tuarua.vibration.ios:NotificationFeedbackType"><apiName>NotificationFeedbackType</apiName><shortdesc/><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiValue id="com.tuarua.vibration.ios:NotificationFeedbackType:ERROR"><apiName>ERROR</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>2</apiData><apiType value="uint"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.tuarua.vibration.ios:NotificationFeedbackType:SUCCESS"><apiName>SUCCESS</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0</apiData><apiType value="uint"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.tuarua.vibration.ios:NotificationFeedbackType:WARNING"><apiName>WARNING</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>1</apiData><apiType value="uint"/></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="com.tuarua.vibration.ios:NotificationFeedbackGenerator"><apiName>NotificationFeedbackGenerator</apiName><shortdesc> NotificationFeedbackGenerator is used to give user feedback when an notification is displayed </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc> NotificationFeedbackGenerator is used to give user feedback when an notification is displayed </apiDesc></apiClassifierDetail><apiConstructor id="com.tuarua.vibration.ios:NotificationFeedbackGenerator:NotificationFeedbackGenerator"><apiName>NotificationFeedbackGenerator</apiName><shortdesc/><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef></apiConstructorDetail></apiConstructor><apiOperation id="com.tuarua.vibration.ios:NotificationFeedbackGenerator:notificationOccurred"><apiName>notificationOccurred</apiName><shortdesc> Call when a notification is displayed, passing the corresponding type </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>notificationType</apiItemName><apiType value="uint"/></apiParam></apiOperationDef><apiDesc> Call when a notification is displayed, passing the corresponding type </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua.vibration.ios:NotificationFeedbackGenerator:prepare"><apiName>prepare</apiName><shortdesc> Informs self that it will likely receive events soon, so that it can ensure minimal latency for
     any feedback generated safe to call more than once before the generator receives an event,
     if events are still imminently possible </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> Informs self that it will likely receive events soon, so that it can ensure minimal latency for
     any feedback generated safe to call more than once before the generator receives an event,
     if events are still imminently possible </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua.vibration.ios:NotificationFeedbackGenerator:release"><apiName>release</apiName><shortdesc> Release the NotificationFeedbackGenerator.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> Release the NotificationFeedbackGenerator.</apiDesc></apiOperationDetail></apiOperation></apiClassifier></apiPackage>